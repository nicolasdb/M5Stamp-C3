#include <SPIFFS.h>
#include <FS.h>

#include "WiFi.h"
#include "ESPAsyncWebServer.h" 

#include <Wire.h>
#include <SSVTimer.h>
#include <Adafruit_GFX.h> 
#include <Adafruit_SSD1306.h>
#include <AM232X.h>
#include <Adafruit_MCP23X17.h>  


// define variables
#define I2C_SDA 1                   // I2C
#define I2C_SCL 0                   // I2C
#define sensorPin   3               // LDR
int sensor;
float temp;
float hum;
String dataMessage;                 // to collect data before saving to log
#define BUTTON      9
int lastState = HIGH;
int currentState;  
int wait = 60;

// Set LED GPIO
int ledPin = 2;                     // MCP23017 pin LED
String ledState;

// Replace with your network credentials
const char* ssid = "EAsy-Access-Point";
const char* password = "1234";

// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

// define timers
SSVTimer timer1;

// define sensor
AM232X AM2320;

// define MCP
Adafruit_MCP23X17 mcp; 

// Replaces placeholder with LED state value
String processor(const String& var){
  Serial.println(var);
  if(var == "STATE"){
    if(mcp.digitalRead(ledPin)){
      ledState = "ON";
    }
    else{
      ledState = "OFF";
    }
    Serial.print(ledState);
    return ledState;
  }
  return String();
}

// SPIFFS functions
#pragma region          // to shrink SPIFFS lines in VS code

#define FORMAT_SPIFFS_IF_FAILED true

void listDir(fs::FS &fs, const char * dirname, uint8_t levels){
    Serial.printf("Listing directory: %s\r\n", dirname);

    File root = fs.open(dirname);
    if(!root){
        Serial.println("- failed to open directory");
        return;
    }
    if(!root.isDirectory()){
        Serial.println(" - not a directory");
        return;
    }

    File file = root.openNextFile();
    while(file){
        if(file.isDirectory()){
            Serial.print("  DIR : ");
            Serial.println(file.name());
            if(levels){
                listDir(fs, file.path(), levels -1);
            }
        } else {
            Serial.print("  FILE: ");
            Serial.print(file.name());
            Serial.print("\tSIZE: ");
            Serial.println(file.size());
        }
        file = root.openNextFile();
    }
}

void readFile(fs::FS &fs, const char * path){
    Serial.printf("Reading file: %s\r\n", path);

    File file = fs.open(path);
    if(!file || file.isDirectory()){
        Serial.println("- failed to open file for reading");
        return;
    }

    Serial.println("- read from file:");
    while(file.available()){
        Serial.write(file.read());
    }
    file.close();
}

void writeFile(fs::FS &fs, const char * path, const char * message){
    Serial.printf("Writing file: %s\r\n", path);

    File file = fs.open(path, FILE_WRITE);
    if(!file){
        Serial.println("- failed to open file for writing");
        return;
    }
    if(file.print(message)){
        Serial.println("- file written");
    } else {
        Serial.println("- write failed");
    }
    file.close();
}

void appendFile(fs::FS &fs, const char * path, const char * message){
    Serial.printf("Appending to file: %s\r\n", path);

    File file = fs.open(path, FILE_APPEND);
    if(!file){
        Serial.println("- failed to open file for appending");
        return;
    }
    if(file.print(message)){
        Serial.println("- message appended");
    } else {
        Serial.println("- append failed");
    }
    file.close();
}
#pragma endregion


// define OLED
#pragma region          // to shrink Oled lines in VS code

#define SCREEN_WIDTH 128            // OLED display width, in pixels
#define SCREEN_HEIGHT 64            // OLED display height, in pixels

#define x1 5
#define y1 40
#define x2 72
#define y2 y1
// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// 'splashNico', 128x64px
const unsigned char epd_bitmap_splashNico [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x40, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xe8, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7c, 0x01, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7e, 0x03, 0x80, 0x03, 0x80, 0x01, 0xf8, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0x03, 0x80, 0x03, 0x80, 0x07, 0xff, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0x83, 0x80, 0x03, 0x80, 0x0f, 0xff, 0x80, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x7b, 0xc3, 0x80, 0x03, 0x80, 0x0f, 0xdf, 0xc0, 0x00, 0x3c, 0x07, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x78, 0xe3, 0x80, 0x03, 0x80, 0x1c, 0x03, 0x80, 0x00, 0xf8, 0x01, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x78, 0xe3, 0x80, 0x03, 0x80, 0x3c, 0x00, 0x00, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0x00, 
  0x00, 0x00, 0x78, 0x73, 0x80, 0x03, 0x80, 0x3c, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x70, 0x00, 0x00, 
  0x00, 0x00, 0x78, 0x7b, 0x80, 0x03, 0xc0, 0x78, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x70, 0x00, 0x00, 
  0x00, 0x00, 0x38, 0x3f, 0x80, 0x03, 0x80, 0x78, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x70, 0x00, 0x00, 
  0x00, 0x00, 0x38, 0x1f, 0x80, 0x03, 0x80, 0x78, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x70, 0x00, 0x00, 
  0x00, 0x00, 0x38, 0x0f, 0x80, 0x01, 0x80, 0x78, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x70, 0x00, 0x00, 
  0x00, 0x00, 0x3c, 0x0f, 0x80, 0x03, 0x80, 0x78, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x60, 0x00, 0x00, 
  0x00, 0x00, 0x3c, 0x0f, 0x80, 0x03, 0x80, 0x78, 0x00, 0x00, 0x03, 0xc0, 0x00, 0xf0, 0x00, 0x00, 
  0x00, 0x00, 0x3c, 0x07, 0x80, 0x03, 0x80, 0x78, 0x00, 0x00, 0x03, 0xc0, 0x00, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x3c, 0x07, 0x80, 0x07, 0x80, 0x3c, 0x00, 0x00, 0x03, 0xc0, 0x00, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x3c, 0x07, 0xc0, 0x07, 0x00, 0x1f, 0x00, 0x20, 0x03, 0xe0, 0x01, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x1c, 0x03, 0xc0, 0x07, 0x00, 0x1f, 0xe0, 0xf0, 0x01, 0xe0, 0x01, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x1e, 0x01, 0xc0, 0x07, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0xf0, 0x03, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x1e, 0x01, 0xc0, 0x07, 0x80, 0x03, 0xff, 0xc0, 0x00, 0x70, 0x7e, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0e, 0x00, 0x80, 0x03, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1040)
const int epd_bitmap_allArray_LEN = 1;
const unsigned char* epd_bitmap_allArray[1] = {
  epd_bitmap_splashNico
};


#pragma endregion


// read sensor value function
void probe() {
    int status = AM2320.read();
        switch (status)
        {
            case AM232X_OK:
            Serial.println(">>>>> I AM2320 awake ᕙ(`▿´)ᕗ");
            break;
            default:
            Serial.println(status);
            break;
        }
  sensor = analogRead(sensorPin);
  temp = AM2320.getTemperature();
  hum = AM2320.getHumidity();
  Serial.print(sensor);
  Serial.print(" , Temp: ");
  Serial.print(temp); Serial.print("°C");
  Serial.print(" , ");
  Serial.print(hum,1); Serial.println("%");

  dataMessage = String(sensor) + "," + String(temp) + "," + String(hum) + "," + "<br>" + "\r\n";
    // Note: the “\r\n” at the end ensures the next reading is written on the next line.
  appendFile(SPIFFS, "/log.html", dataMessage.c_str());
  }

void setup() {
   Serial.begin(115200);
   Wire.begin(I2C_SDA,I2C_SCL);
   AM2320.begin();
   mcp.begin_I2C();
   pinMode(sensorPin, INPUT);
   pinMode(BUTTON, INPUT_PULLUP);
   mcp.pinMode(ledPin, OUTPUT);
   mcp.digitalWrite(ledPin, LOW);

  // start SPIFFS
  if(!SPIFFS.begin()){
 // if(!SPIFFS.begin(FORMAT_SPIFFS_IF_FAILED)){                         // to format partition
        Serial.println("SPIFFS Mount Failed");
        return;
    }
  writeFile(SPIFFS, "/log.html", "LDR, Temperature, Humidity, <br> \r\n");       // to create the file 
    // Note: the “\r\n” at the end ensures the next reading is written on the next line.
  listDir(SPIFFS, "/", 0);
  
  timer1.SetEnabled(true);
  timer1.SetInterval((wait)*1000);
  timer1.SetOnTimer(probe);

  if (! AM2320.begin() )  {
        Serial.println("Sensor not found");
        while (1);
  }

  delay(3000);

  // Connect to Wi-Fi network with SSID and password
  Serial.println("Setting AP (Access Point)…");
  // Remove the password parameter, if you want the AP (Access Point) to be open
  //WiFi.softAP(ssid, password);
  WiFi.softAP(ssid);
  
  // Print AccessPoint IP address and start web server
  IPAddress IP = WiFi.softAPIP();
  Serial.print("Page on this IP address: ");
  Serial.println(IP);

#pragma region      /// config web server
  // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, "/index.html", String(), false, processor);
  });
  
  // Route to load style.css file
  server.on("/style.css", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, "/style.css", "text/css");
  });

  // Route to set GPIO to HIGH
  server.on("/on", HTTP_GET, [](AsyncWebServerRequest *request){
    mcp.digitalWrite(ledPin, HIGH);    
    request->send(SPIFFS, "/index.html", String(), false, processor);
  });
  
  // Route to set GPIO to LOW
  server.on("/off", HTTP_GET, [](AsyncWebServerRequest *request){
    mcp.digitalWrite(ledPin, LOW);    
    request->send(SPIFFS, "/index.html", String(), false, processor);
  });

  // Route to show log.html
  server.on("/html", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, "/log.html", "text/html");
  });

  // Route to show text.txt
  server.on("/quote", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, "/quote.html", "text/html");
  });

   // Route to show text.txt
  server.on("/data", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, "/log.txt", "text/plain");
  });

#pragma endregion

  server.begin();

  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3D for 128x64
      Serial.println(F("SSD1306 allocation failed"));
      for(;;);
  }
   // delay(2000);
  display.clearDisplay();

  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(10, 45);
  // Display static text
  display.println("the awesome logger");
  Serial.println("Oled monitor online");

  display.drawBitmap(0, -5, epd_bitmap_splashNico, 128, 64, 1);
  // drawBitmap() method that accepts the following arguments (x, y, image array, image width, image height, rotation)

  display.display(); 
  delay(100);

    AM2320.wakeUp();

    int status = AM2320.read();
    switch (status)
    {
        case AM232X_OK:
        Serial.println("AM2320 sensor OK");
        break;
        default:
        Serial.println(status);
        break;
    }
    delay(2000);

}

void loop() {
  // put your main code here, to run repeatedly:
  
    timer1.RefreshIt();

    currentState = digitalRead(BUTTON);
        if(lastState == LOW && currentState == HIGH) {
            Serial.println("Button Pressed!");
            // clear display
            display.clearDisplay();
            delay(100);
        
            // show logo
            display.drawBitmap(0, -5, epd_bitmap_splashNico, 128, 64, 1);
            // display temperature
            display.setTextSize(1);
            display.setCursor(x1,y1);
            display.print("Temp: ");
            display.setTextSize(2);
            display.setCursor(x1,(y1+10));
            display.print(AM2320.getTemperature(),0);
            //display.print(" ");
            display.setTextSize(1);
            display.cp437(true);      // To display the º symbol, we use the Code Page 437 font
            display.write(167);       // to display your chosen character. The º symbol corresponds to character 167.
            display.setTextSize(2);
            display.print("C");
            
            // display humidity
            display.setTextSize(1);
            display.setCursor(x2, y2);
            display.print("Humidity: ");
            display.setTextSize(2);
            display.setCursor(x2, (y2+10));
            display.print(hum,0);
            display.setTextSize(2);
            display.print("%"); 
    
            display.display(); 
            readFile(SPIFFS, "/log.html");
        }
    lastState = currentState;

  delay(100);
}